source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
debugSource('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[1]]
CPT[[4]]
CPT[[4]][1,1,1]
test = training[training[,4] ==0 & training[,1]==0 & training[,5] == 0 , ]
test2 = training[training[,1]==0 & training[,5] == 0 , ]
CPT[[4]][2,2,2]
test = training[training[,4] ==1 & training[,1]==1 & training[,5] == 1 , ]
test2 = training[training[,1]==1 & training[,5] == 1 , ]
test2 = training[training[,1]==0 & training[,5] == 0 , ]
test2 = training[training[,1]==0 & training[,5] == 1 , ]
test2 = training[training[,1]==0 & training[,5] == 2 , ]
test2 = training[training[,1]==1 & training[,5] == 2 , ]
debugSource('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
condition
CPT[[4]]
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
debugSource('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
condition
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
debugSource('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
debugSource('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
condition
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
source('~/Desktop/RA working file/TAN_rework/CPT_maker.R')
CPT[[4]]
test = training[training[,4] ==1 & training[,1]==1 & training[,5] == 1 , ]
test2 = training[training[,1]==1 & training[,5] == 1 , ]
test = training[training[,4] ==0 & training[,1]==1 & training[,5] == 1 , ]
test = training[training[,4] ==2 & training[,1]==1 & training[,5] == 1 , ]
test = training[training[,4] ==0 & training[,1]==2 & training[,5] == 1 , ]
test2 = training[training[,1]==2 & training[,5] == 1 , ]
n_col = ncol(training)
n_row = nrow(PC_matrix)
n_class = length(unique(training[,n_col]))
CPT <-list(list())
root = matrix(0, ncol =(max(training[,1],testing[,1])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
testing = training[,1:15]
testing = training[1:15,]
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,1] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
root = matrix(0, ncol =(max(training[,1],testing[,1])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,1] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
CPT[[1]][[1]] = root
CPT[[1]][[1]]
CPT[[1]][[1]][2,2]
CPT[[1]][[2]] = root
CPT[[1]][[2]]
View(iris_testing)
exam = iris
View(exam)
for(column_i in 1:(n_col-1)){
root = matrix(0, ncol =(max(training[,column_i],testing[,column_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,column_i] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
CPT[[1]][[column_i]] = root
}
CPT[[`]]
CPT[[1]]
View(training)
training[,1]==0
sumg(training[,1]==0)
sum(training[,1]==0)
View(PC_matrix)
View(M.I_matrix)
View(MST_adjacency)
View(PC_matrix)
load("~/Desktop/25Data result.xlsx")
load("~/Desktop/RA working file/IEM_25_datas.RData")
write.csv(IEM_iris, file="IEM_iris.csv")
IEM_iris <- read.csv("~/Desktop/RA working file/TAN_rework/IEM_iris.csv", row.names=1)
View(IEM_iris)
library(igraph)
dat = IEM_iris
Calculate_mi <- function(dat){
n_feat <- ncol(dat)-1
n_row <- nrow(dat)
M.I_matrix <- matrix(0, nrow=n_feat, ncol=n_feat)
for(i in 1:(n_feat-1)){  #i,j are index for X_i, X_j
for(j in (i+1):n_feat){
number.of.x = length(unique(dat[,i])) #get unique value in X_i, X_j
number.of.y = length(unique(dat[,j]))
M.I = 0
table_i = prop.table( table(dat[,i]) )
table_j = prop.table( table(dat[,j]) )
table_ij = prop.table( table(dat[,i], dat[,j]) )
table_ij[which(table_ij == 0 )] = 0.1/n_row
for(x in 1:number.of.x){
for(y in 1:number.of.y){
M.I = M.I + ( table_ij[x,y] * log(table_ij[x,y] / (table_i[x]) * table_j[y]) )
}
}
M.I_matrix[i,j] = M.I
}
}
return (M.I_matrix)
}
M.I_matrix <- Calculate_mi(test.dat)
M.I_matrix <- Calculate_mi(dat)
MST <- function(M.I_matrix){
#Need package("igraph")
flip_matrix <- 1 - M.I_matrix
G = graph.adjacency(flip_matrix, weighted = TRUE)
MST = minimum.spanning.tree(G)
MST_adjacency = get.adjacency(MST, sparse = FALSE)
return (MST_adjacency)
}
MST_adjacency = MST(M.I_matrix)
source('~/Desktop/RA working file/TAN_rework/Draw_tree.R')
View(MST_adjacency)
View(M.I_matrix)
View(tree_struc)
source('~/Desktop/RA working file/TAN_rework/Draw_tree.R')
View(tree_struc)
tree_struc[child_i,]
is.element(1,tree_struc[1,])
View(tree_struc)
parent = which(tree_struc[2,] == 1)
for(child_i in 1:n_class){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parnt+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
n_class = length(unique(training[,n_col]))
testing = dat[1:15,]
training = dat[15:150, ]
n_col = ncol(training)
n_row = nrow(PC_matrix)
n_class = length(unique(training[,n_col]))
n_class = length(unique(training[,n_col]))
CPT <-list(list())
#make the first CPT table with root-feature #root =without parents (class is the only condition)
for(column_i in 1:(n_col-1)){
root = matrix(0, ncol =(max(training[,column_i],testing[,column_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,column_i] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
CPT[[1]][[column_i]] = root
}
for(child_i in 1:n_class){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parnt+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
for(child_i in 1:n_class){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parent+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
for(child_i in 1:n_class){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parent+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child_i]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
for(child_i in 1:(n_class-1)){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parent+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child_i]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
for(child_i in 2:(n_col-1)){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parent+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
CPT[[child_i]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[1]]
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
View(training)
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[1]]
View(condition_table)
View(condition_training)
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
View(condition_table)
CPT[[child_i]][[parent_value]] = condition_table
CPT[[2]][[1]]
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]][[1]]
CPT[[2]]
CPT <- list()
# Now the new experiments
for(i in 1:ncol(training)){
CPT[[length(List)+1]] <- list(matrix(0,1,1))
}
CPT <- list()
# Now the new experiments
for(i in 1:ncol(training)){
CPT[[length(List)+1]] <- CPT(matrix(0,1,1))
}
CPT <- list()
# Now the new experiments
for(i in 1:ncol(training)){
CPT[[length(CPT)+1]] <- CPT(matrix(0,1,1))
}
CPT <- list()
CPT[[length(CPT)+1]] <- CPT(matrix(0,1,1))
CPT[[length(CPT)+1]] <- list(matrix(0,1,1))
CPT <- list()
# Now the new experiments
for(i in 1:ncol(training)){
CPT[[length(CPT)+1]] <- list(matrix(0,1,1))
}
CPT[[2]]
CPT[[2]][[1]]
for(column_i in 1:(n_col-1)){
root = matrix(0, ncol =(max(training[,column_i],testing[,column_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,column_i] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
CPT[[ncol(training)]][[column_i]] = root
}
CPT[[5]]
CPT <- list()
#make a list of list
for(i in 1:ncol(training)){
CPT[[length(CPT)+1]] <- list(matrix(0,1,1))
}
#make the first CPT table with root-feature #root =without parents (class is the only condition)
for(column_i in 1:(n_col-1)){
root = matrix(0, ncol =(max(training[,column_i],testing[,column_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
for(class_i in 1:nrow(root)){       #row and col fill up cpt table
for(cate_i in 1:ncol(root)){
root[class_i,cate_i] = length( which(training[,column_i] == (cate_i-1) & training[,n_col] == (class_i-1)) )
}
}
CPT[[ncol(training)]][[column_i]] = root
}
CPT[[5]][[1]]
length(which(training[,1]==1))
length(which(training[,1]==0))
for(child_i in 1:(n_col-1)){          #make a cpt table for each feature
has.parent = is.element(1,tree_struc[child_i,])
if(has.parent == TRUE){           #decide if it needs CPT or not checking parents from tree_struc
parent = which(tree_struc[child_i,] == 1)
max_parent = max(training[,parent], testing[,parent])   #get maximum value from parent column for loop
for(parent_value in 1:(max_parent+1)){                    #add 1 since value starts from 0
#make an empty table with maximum value of child_column, class_column
condition_table = matrix(0, ncol=(max(training[,child_i],testing[,child_i])+1), nrow=(max(training[,n_col],testing[,n_col])+1))
condition_training = training[training[,parent]==(parent_value-1), ]     #select row with specific parent_value
for(class_i in 1:nrow(condition_table)){       #row and col fill up cpt table
for(cate_i in 1:ncol(condition_table)){
condition_table[class_i,cate_i] = length( which(condition_training[,column_i] == (cate_i-1) & condition_training[,n_col] == (class_i-1)) )
}
}
#declare list of list in a different way...check it on webpage...doesnt work!
CPT[[child_i]][[parent_value]] = condition_table  #save cpt table in CPT_list
}
}
else{
#does not need to build cpt   (built in CPT[[1]] alraedy)
}
}
CPT[[1]]
CPT[[2]]
CPT[[3]]
CPT[[4]]
CPT[[2]]
CPT[[2]][[1]]
View(tree_struc)
CPT[[2]][[2]]
CPT[[2]][[3]]
which(training[,2]==2&training[,3]==2)
training[training[,3]==2,2]
which(training[,1]==2&training[,3]==2)
CPT[[1]]
CPT[[2]]
which(training[,2] == 0 &training[,3]==2)
length(which(training[,2] == 0 &training[,3]==2))
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
View(condition_table)
View(condition_training)
View(condition_table)
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]]
CPT[[2]][[3]]
CPT[[2]][[3]][1,]
CPT[[2]][[3]][2,]
sum(CPT[[2]][[3]][2,])
sum(CPT[[2]][[3]][,3])
debugSource('~/Desktop/RA working file/NBC_CV.R')
debugSource('~/Desktop/RA working file/NBC_CV.R')
debugSource('~/Desktop/RA working file/NBC_CV.R')
debugSource('~/Desktop/RA working file/NBC_CV.R')
CPT
CPT[[1]]
length(CPT[[1]]==0)
length(training[,1]==0)
length(which(training[,1]==0))
debugSource('~/Desktop/RA working file/NBC_CV.R')
CPT[[1]]
length(which(training[,1]==0))
length(which(training[,1]==1))
length(which(training[,1]==2))
debugSource('~/Desktop/RA working file/NBC_CV.R')
CPT[[5]]
debugSource('~/Desktop/RA working file/NBC_CV.R')
length(which(training[,5] == 0))
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT
CPT[[2]]
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]]
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]]
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
View(condition_table)
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]]
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
source('~/Desktop/RA working file/TAN_rework/TAN CPT.R')
CPT[[2]]
source('~/Desktop/RA working file/TAN_rework/Header.R')
source('~/Desktop/RA working file/TAN_rework/Calculate_mi.R')
source('~/Desktop/RA working file/TAN_rework/MST.R')
source('~/Desktop/RA working file/TAN_rework/Draw_tree.R')
source('~/Desktop/RA working file/TAN_rework/CPT_builder.R')
IEM_iris <- read.csv("~/Desktop/RA working file/TAN_rework/IEM_iris.csv", row.names=1)
View(IEM_iris)
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/CPT_builder.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(M.I_matrix)
View(MST_adjacency)
View(tree_struc)
CPT[[1]]
CPT[[2]]
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
View(this_sample)
View(prob_table)
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
CPT[[5]][[1]]
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
CPT[[5]][[1]]
source('~/Desktop/RA working file/TAN_rework/CPT_builder.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(this_sample)
View(tree_struc)
View(parent_value)
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(this_sample)
View(prob_table)
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
View(this_sample)
View(this_sample)
View(prob_table)
View(prob_table)
source('~/Desktop/RA working file/TAN_rework/CPT_builder.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
source('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
debugSource('~/Desktop/RA working file/TAN_rework/TAN_CV.R')
View(prob_table)
View(sample)
View(this_sample)
